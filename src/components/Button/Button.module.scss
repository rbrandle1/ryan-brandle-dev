@use '@/styles/utils/viewport';

.buttonContainer {
	--edge-size: 7px;
	--shadow-color: var(--button-border);
	--button-speed: var(--duration-md);

	position: relative;
	display: inline-block;
	width: 100%;

	&:active {
		transform: var(--button-press);
	}

	// Since no animation is needed on touch devices, this reduces the width of the button to align button edges with sibling elements
	@media (hover: none) and (not (pointer: fine)) {
		width: calc(100% - var(--edge-size) * 2);
		margin-inline: var(--edge-size);
	}
}

.button {
	position: relative;
	appearance: none;
	display: inline-flex;
	width: 100%;
	min-width: fit-content;
	justify-content: center;
	align-items: center;
	font-optical-sizing: auto;
	font-weight: var(--font-weight-bold);
	font-style: normal;
	font-size: var(--text-base);
	text-transform: uppercase;
	border: none;
	color: var(--button-foreground);
	background-color: var(--button-background);
	padding: var(--button-spacing);
	cursor: pointer;
	z-index: 2;
	transition: background-color var(--button-speed) ease-out, color var(--button-speed) ease-out;

	@include viewport.has-hover(':hover', ':focus-visible') {
		background-color: var(--button-background-hover);
		color: var(--button-foreground-hover);

		~ .buttonShadow {
			transform: translate(0, 0);

			&.bottomLeft::before,
			&.bottomLeft::after,
			&.topRight::before,
			&.topRight::after {
				transform: scale(0);
			}
		}
	}
}

.buttonShadow {
	position: absolute;
	inset: 0;
	background-color: var(--button-border);
	transition: transform var(--button-speed) ease-out;
	z-index: 1;

	&.bottomLeft,
	&.topRight {
		&::before,
		&::after {
			position: absolute;
			content: '';
			width: 0;
			height: 0;
			border: var(--edge-size) solid transparent;
			transition: opacity var(--button-speed) ease-out, transform var(--button-speed) ease-out;
		}

		&::before {
			border-right: var(--edge-size) solid var(--button-border);
			border-left-width: 0;
			right: 100%;
		}

		&::after {
			border-left: var(--edge-size) solid var(--button-border);
			border-top-width: 0;
		}
	}

	&.bottomLeft {
		transform: translate(calc(var(--edge-size) * -1), var(--edge-size));

		&::before {
			top: calc(var(--edge-size) / -1);
			right: calc(100% - var(--edge-size));
			transform-origin: 0 50%;
		}

		&::after {
			left: 100%;
			bottom: 0;
			transform-origin: 0 100%;
		}
	}

	&.topRight {
		transform: translate(var(--edge-size), calc(var(--edge-size) * -1));

		&::before {
			top: 0;
			transform-origin: 100% 0;
		}

		&::after {
			left: calc(100% - var(--edge-size));
			bottom: calc(var(--edge-size) / -1);
			transform-origin: 50% 0;
		}
	}
}
