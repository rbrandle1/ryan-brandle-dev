/**
* _typography.scss
*
* Typography mixins and functions
*/
@use 'sass:list';
@use 'sass:map';
@use './viewport';

// HEADLINES
$headline-base: (
	font-family: var(--font-header),
	font-weight: var(--font-weight-bold),
	line-height: var(--line-height-sm),
	color: var(--color-primary),
	text-transform: uppercase,
);

$headlines: (
	sm:
		map.merge(
			$headline-base,
			(
				font-size: var(--text-base),
			)
		),
	md:
		map.merge(
			$headline-base,
			(
				font-size: var(--text-md),
			)
		),
	lg:
		map.merge(
			$headline-base,
			(
				font-size: var(--text-lg),
			)
		),
	xl:
		map.merge(
			$headline-base,
			(
				font-size: var(--text-xl),
			)
		),
	2xl:
		map.merge(
			$headline-base,
			(
				font-size: var(--text-2xl),
			)
		),
	3xl:
		map.merge(
			$headline-base,
			(
				font-size: var(--text-3xl),
			)
		),
);

@mixin headline($variant: 3xl) {
	$headline: map.get($headlines, $variant);

	@if not $headline {
		@error '"#{$variant}" is not a valid variant. Valid variants are: #{map.keys($headlines)}';
	}

	font-family: map.get($headline, font-family);
	font-size: map.get($headline, font-size);
	font-weight: map.get($headline, font-weight);
	line-height: map.get($headline, line-height);
	color: map.get($headline, color);
	text-transform: map.get($headline, text-transform);
}

// DISPLAY TEXT
$display-base: (
	font-family: var(--font-header),
	font-weight: var(--font-weight-bold),
	line-height: var(--line-height-xs),
	color: var(--color-primary),
	text-transform: uppercase,
);

$displays: (
	sm:
		map.merge(
			$display-base,
			(
				font-size: var(--text-5xl),
			)
		),
	lg:
		map.merge(
			$display-base,
			(
				font-size: var(--text-7xl),
			)
		),
);

@mixin display($variant: sm) {
	$display: map.get($displays, $variant);

	@if not $display {
		@error '"#{$variant}" is not a valid variant. Valid variants are: #{map.keys($displays)}';
	}

	font-family: map.get($display, font-family);
	font-size: map.get($display, font-size);
	font-weight: map.get($display, font-weight);
	line-height: map.get($display, line-height);
	color: map.get($display, color);
	text-transform: map.get($display, text-transform);
}

// CALLOUT TEXT
$callout-base: (
	font-family: var(--font-alt),
	font-weight: var(--font-weight-bold),
	line-height: var(--line-height-sm),
	color: var(--color-primary),
);

$callouts: (
	sm:
		map.merge(
			$callout-base,
			(
				font-size: var(--text-lg),
			)
		),
	md:
		map.merge(
			$callout-base,
			(
				font-size: var(--text-xl),
			)
		),
	lg:
		map.merge(
			$callout-base,
			(
				font-size: var(--text-2xl),
			)
		),
);

@mixin callout($variant: md) {
	$callout: map.get($callouts, $variant);

	@if not $callout {
		@error '"#{$variant}" is not a valid variant. Valid variants are: #{map.keys($callouts)}';
	}

	font-family: map.get($callout, font-family);
	font-size: map.get($callout, font-size);
	font-weight: map.get($callout, font-weight);
	line-height: map.get($callout, line-height);
	color: map.get($callout, color);
}

// Paragraphs
$paragraph-base: (
	font-family: var(--font-body),
	color: var(--color-primary),
);

$paragraphs: (
	sm:
		map.merge(
			$paragraph-base,
			(
				font-size: var(--text-sm),
			)
		),
	base:
		map.merge(
			$paragraph-base,
			(
				font-size: var(--text-base),
			)
		),
	lg:
		map.merge(
			$paragraph-base,
			(
				font-size: var(--text-md),
			)
		),
);

@mixin p($variant: base) {
	$p: map.get($paragraphs, $variant);

	@if not $p {
		@error '"#{$variant}" is not a valid variant. Valid variants are: #{map.keys($paragraphs)}';
	}

	font-family: map.get($p, font-family);
	font-size: map.get($p, font-size);
	color: map.get($p, color);
}

/// A Sass map of link properties. The _base is inherited by each variant.
/// @group typography
$links: (
	default: (
		color: var(--link-primary),
		hover: var(--link-primary-hover),
		visited: var(--link-primary-visited),
	),
	text: (
		color: var(--color-text),
		hover: var(--color-text-dark),
		visited: var(--color-text),
	),
);

/// Links
/// @group Typography
/// @param {string} $variant [default] - Sets the link color palette.
/// @param {string} $underline [none] - Sets the link underline properties.
/// @example
/// @include typography.link;
/// @include typography.link(text);
/// @include typography.link(text, always);
@mixin link($variant: default, $underline: none) {
	$link: map.get($links, $variant);

	color: map.get($link, color);
	font-weight: var(--font-weight-bold);

	@if ($underline == none) {
		text-decoration: none;
	}

	@if ($underline == always) {
		text-decoration: underline;
		text-decoration-color: var(--text-accent);
	}

	@if ($underline == hover) {
		text-decoration: none;

		@include viewport.has-hover {
			text-decoration: underline;
		}

		&:focus {
			text-decoration: underline;
		}
	}

	@include viewport.has-hover {
		color: map.get($link, hover);
	}

	&:visited {
		color: map.get($link, visited);

		@include viewport.has-hover {
			color: map.get($link, hover);
		}
	}
}

// /// Styling and layout for a link with an icon, i.e. an external link
// /// @group Typography
// /// @param {string} $direction [right] - Sets styles for svg icon. The direction must match the same location as the svg in the html markup, on the before (left) or after (right) the link.
// /// @param {string} $variant [default] - Sets the link color palette.
// /// @example
// /// @include typography.link-with-icon;
// /// @include typography.link-with-icon(left);
// /// @include typography.link-with-icon(left, white);
// @mixin link-with-icon($direction: right, $variant: default) {
// 	$directions: left, right;

// 	@if not list.index($directions, $direction) {
// 		@error '"#{$direction}" is not a valid direction. Please use one of these values: #{$directions}';
// 	}

// 	@include link($variant);
// 	display: inline-flex;
// 	align-items: center;

// 	svg {
// 		width: 1.25em;
// 		fill: currentColor;

// 		@if ($direction == right) {
// 			margin-left: var(--space-2xs);
// 		}

// 		@if ($direction == left) {
// 			margin-right: var(--space-2xs);
// 		}
// 	}
// }

@mixin caption {
	font-size: var(--text-sm);
	color: var(--text-tertiary);
}
