/**
* _layout.scss
*
* Layout mixins and functions
*/

@use './element';
@use 'sass:list';
@use 'sass:map';

$viewport-sizes: (
	full: 100%,
	xs: var(--viewport-xs),
	sm: var(--viewport-sm),
	md: var(--viewport-md),
	lg: var(--viewport-lg),
	xl: var(--viewport-xl),
	2xl: var(--viewport-2xl),
);

// @include layout.max-width(xl);
@mixin max-width($viewport: lg) {
	$valid-sizes: map.keys($viewport-sizes);

	@if not list.index($valid-sizes, $viewport) {
		@error '"#{$viewport}" is not a valid size. Please use one of these values: #{$valid-sizes}';
	}

	margin-inline: auto;
	padding: 0 clamp(var(--space-base), 4dvw, var(--space-lg));
	width: min(#{map.get($viewport-sizes, $viewport)}, 100%);
}

// @mixin viewport-width {
// 	position: relative;
// 	left: 50%;
// 	right: 50%;
// 	margin-inline: -50vw;
// 	width: 100vw;
// }

@mixin grid {
	--gutter: clamp(var(--space-base), 4dvw, var(--space-lg));
	--main: min(var(--viewport-md), 100% - var(--gutter) * 2);
	--breakout: minmax(0, var(--space-3xl));
	--full: minmax(var(--gutter), 1fr);

	display: grid;
	grid-template-columns:
		[full-start] var(--full)
		[breakout-start] var(--breakout)
		[main-start] var(--main) [main-end]
		var(--breakout) [breakout-end]
		var(--full) [full-end];

	> * {
		grid-column: main;
	}

	.breakout {
		grid-column: breakout;
	}

	.full {
		grid-column: full;
	}
}
