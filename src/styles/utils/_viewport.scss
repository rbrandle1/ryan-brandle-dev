/**
* _viewport.scss
*
* Utility variables, functions and mixins for setting viewport styles
*/

@use 'sass:list';
@use 'sass:map';

$width: (
	2xs: 350px,
	xs: 500px,
	sm: 768px,
	md: 1024px,
	lg: 1200px,
	xl: 1440px,
	2xl: 1600px,
);

$height: (
	xs: 400px,
	sm: 600px,
	md: 850px,
	lg: 1000px,
);

//? Try to internalize this info, specifically the dimension mapping.
/// Breakpoint media query helper for min/max widths or heights
/// @group Viewport
/// @param {string} $size - Breakpoint size using a value available in the map or a custom string.
/// @param {string} $direction [min] - Set 'min' to target anything above the set $size and 'max' for anything below it.
/// @param {string} $dimension [width] - Set breakpoint based on the width or height of the viewport.
/// @output A media query with a min or max width based on a viewport size and the custom ruleset.
/// @example
///   @include viewport.breakpoint(sm);
///   @include viewport.breakpoint(lg, max);
@mixin breakpoint($value, $direction: min, $dimension: width) {
	$directions: min, max;
	$dimensions: width, height;
	$size: $value;
	$map: $width;

	@if not list.index($directions, $direction) {
		@error '"#{$direction}" is not a valid direction. Please use one of these values: #{$directions}';
	}

	@if not list.index($dimensions, $dimension) {
		@error '"#{$dimension}" is not a valid dimension. Please use one of these values: #{$dimensions}';
	}

	@if $dimension == height {
		$map: $height;
	}

	@if map.has-key($map, $size) {
		$size: map.get($map, $size);
	}

	@if $direction == min {
		@media (min-#{$dimension}: $size) {
			@content;
		}
	} @else if $direction == max {
		@media (max-#{$dimension}: $size - 1) {
			@content;
		}
	}
}

/// Media query that sets a ruleset when the viewport size is between two values.
/// @group Viewport
/// @param {string} $minValue - Min viewport size from a value in the map or a custom string.
/// @param {string} $maxValue - Max viewport size from a value in the map or a custom string.
/// @param {string} $dimension [width] - Set breakpoint based on the width or height of the viewport.
/// @example
///   @include viewport.between(sm, md);
@mixin between($minValue, $maxValue, $dimension: width) {
	$dimensions: width, height;
	$min: $minValue;
	$max: $maxValue;
	$map: $width;

	@if not list.index($dimensions, $dimension) {
		@error '"#{$dimension}" is not a valid dimension. Please use one of these values: #{$dimensions}';
	}

	@if $dimension == height {
		$map: $height;
	}

	@if map.has-key($map, $min) {
		$min: map.get($map, $min);
	}

	@if map.has-key($map, $max) {
		$max: map.get($map, $max);
	}

	@media (min-#{$dimension}: $min) and (max-#{$dimension}: $max - 1) {
		@content;
	}
}

// Media query created to check if a device is hover-able.
// This prevents hover states from being applied on touch screen devices.
// Allows you to write multiple selectors
//   @include has-hover;
//   @include has-hover(':hover:not(.active)');
//   @include has-hover(':hover', ':focus-visible');
@mixin has-hover($selector: ':hover', $extraSelectors...) {
	@media (hover: hover) and (pointer: fine) {
		&#{$selector} {
			@content;
		}
		@for $i from 0 to length($extraSelectors) {
			&#{$extraSelectors} {
				@content;
			}
		}
	}
}
